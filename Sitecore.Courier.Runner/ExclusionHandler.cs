using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;

namespace Sitecore.Courier.Runner
{
    public static class ExclusionHandler
    {
        // hard deletes excluded files from filesystem. Move to archive directory instead if do not want to delete from filesystem.
        public static void RemoveExcludedItems(string directoryPath, IEnumerable<string> excludedFiles)
        {
            foreach (var item in excludedFiles)
            {
                var path = string.Concat(string.Concat(directoryPath, "\\"), item);
                if (File.Exists(path))
                {                    
                    File.Delete(path);                    
                }
            }
        }

        // retrieves list of items to exclude from configuration. Default formatting is .scproj xml schema generated by Hedgehog TDS.
        public static List<string> GetExcludedItems(string projectFilePath, string buildConfiguration)
        {
            var excludedItems = new List<string>();
            var xmldocument = new XmlDocument();
            xmldocument.Load(projectFilePath);
            using (var reader = XmlReader.Create(projectFilePath))
            {
                reader.MoveToContent();
                while (reader.Read())
                {
                    if (reader.NodeType == XmlNodeType.Element && reader.Name == "SitecoreItem")
                    {
                        var node = xmldocument.ReadNode(reader);
                        foreach (XmlNode child in node.ChildNodes)
                        {
                            if (child.NodeType == XmlNodeType.Element && child.Name == "ExcludeItemFrom" &&
                                child.InnerText.Contains(buildConfiguration))
                            {
                                var path = node.Attributes[0].Value;
                                excludedItems.Add(path);
                            }
                        }
                    }
                }
            }            
            return excludedItems;
        }

        // validates that an exclusion file is specified and exists if a build configuration is specified in argument parameters.
        public static bool HasValidExclusions(string buildConfiguration, string xmlFilePath)
        {
            if (string.IsNullOrEmpty(buildConfiguration))
            {
                return false;
            }

            if (string.IsNullOrEmpty(xmlFilePath))
            {
                throw new NullReferenceException("ScProjectFilePath is required if Build Configuration is provided.");
            }

            if (!File.Exists(xmlFilePath))
            {
                throw new FileNotFoundException(string.Format("Project file path {0} does not exist.", xmlFilePath));
            }

            return true;
        }
    }
}
